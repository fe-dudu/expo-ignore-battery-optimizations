{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AAC3E,OAAO,8BAA8B,MAAM,kCAAkC,CAAC;AAE9E,MAAM,UAAU,8BAA8B;IAC7C,IAAI,CAAC,8BAA8B,EAAE,8BAA8B,EAAE,CAAC;QACrE,OAAO,KAAK,CAAC;IACd,CAAC;IAED,OAAO,8BAA8B,CAAC,8BAA8B,EAAE,CAAC;AACxE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iCAAiC;IACtD,IAAI,CAAC,8BAA8B,EAAE,iCAAiC,EAAE,CAAC;QACxE,OAAO;IACR,CAAC;IAED,MAAM,8BAA8B,CAAC,iCAAiC,EAAE,CAAC;AAC1E,CAAC;AAED,MAAM,CAAC,MAAM,6BAA6B,GAAG,oBAAoB,CAAC;IACjE,SAAS,EAAE,KAAK,IAAI,EAAE;QACpB,MAAM,UAAU,GAAG,8BAA8B,EAAE,CAAC;QACpD,OAAO;YACN,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM;YACvE,OAAO,EAAE,UAAU;YACnB,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,OAAO;SACjB,CAAA;IACF,CAAC;IACD,aAAa,EAAE,KAAK,IAAI,EAAE;QACxB,MAAM,iCAAiC,EAAE,CAAC;QAC1C,MAAM,UAAU,GAAG,MAAM,8BAA8B,EAAE,CAAC;QAC1D,OAAO;YACN,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM;YACvE,OAAO,EAAE,UAAU;YACnB,WAAW,EAAE,IAAI;YACjB,OAAO,EAAE,OAAO;SACjB,CAAA;IACF,CAAC;CACD,CAAC,CAAC","sourcesContent":["import { createPermissionHook, PermissionStatus } from 'expo-modules-core';\nimport ExpoIgnoreBatteryOptimizations from \"./ExpoIgnoreBatteryOptimizations\";\n\nexport function isIgnoringBatteryOptimizations(): boolean {\n if (!ExpoIgnoreBatteryOptimizations?.isIgnoringBatteryOptimizations) {\n  return false;\n }\n\n return ExpoIgnoreBatteryOptimizations.isIgnoringBatteryOptimizations();\n}\n\nexport async function requestIgnoreBatteryOptimizations(): Promise<void> {\n if (!ExpoIgnoreBatteryOptimizations?.requestIgnoreBatteryOptimizations) {\n  return;\n }\n\n await ExpoIgnoreBatteryOptimizations.requestIgnoreBatteryOptimizations();\n}\n\nexport const useIgnoreBatteryOptimizations = createPermissionHook({\n getMethod: async () => {\n   const isIgnoring = isIgnoringBatteryOptimizations();\n   return {\n    status: isIgnoring ? PermissionStatus.GRANTED : PermissionStatus.DENIED,\n    granted: isIgnoring,\n    canAskAgain: true,\n    expires: 'never',\n  }\n },\n requestMethod: async () => {\n   await requestIgnoreBatteryOptimizations();\n   const isIgnoring = await isIgnoringBatteryOptimizations();\n   return {\n    status: isIgnoring ? PermissionStatus.GRANTED : PermissionStatus.DENIED,\n    granted: isIgnoring,\n    canAskAgain: true,\n    expires: 'never',\n  }\n },\n});\n"]}